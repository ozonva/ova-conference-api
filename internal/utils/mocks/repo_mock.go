// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/utils/repo/repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	"fmt"
	domain "ova-conference-api/internal/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// AddEntities mocks base method.
func (m *MockRepo) AddEntities(ctx context.Context, entities []domain.Conference, callback func([]domain.Conference)) ([]domain.Conference, error) {
	m.ctrl.T.Helper()
	fmt.Println("TIMERSSSS")
	ret := m.ctrl.Call(m, "AddEntities", ctx, entities, callback)
	ret0, _ := ret[0].([]domain.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEntities indicates an expected call of AddEntities.
func (mr *MockRepoMockRecorder) AddEntities(ctx, entities, callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntities", reflect.TypeOf((*MockRepo)(nil).AddEntities), ctx, entities, callback)
}

// AddEntity mocks base method.
func (m *MockRepo) AddEntity(ctx context.Context, entity domain.Conference) (*domain.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEntity", ctx, entity)
	ret0, _ := ret[0].(*domain.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEntity indicates an expected call of AddEntity.
func (mr *MockRepoMockRecorder) AddEntity(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEntity", reflect.TypeOf((*MockRepo)(nil).AddEntity), ctx, entity)
}

// Close mocks base method.
func (m *MockRepo) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRepoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRepo)(nil).Close))
}

// DeleteEntity mocks base method.
func (m *MockRepo) DeleteEntity(ctx context.Context, entityId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", ctx, entityId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockRepoMockRecorder) DeleteEntity(ctx, entityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockRepo)(nil).DeleteEntity), ctx, entityId)
}

// DescribeEntity mocks base method.
func (m *MockRepo) DescribeEntity(ctx context.Context, entityId int64) (*domain.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeEntity", ctx, entityId)
	ret0, _ := ret[0].(*domain.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeEntity indicates an expected call of DescribeEntity.
func (mr *MockRepoMockRecorder) DescribeEntity(ctx, entityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeEntity", reflect.TypeOf((*MockRepo)(nil).DescribeEntity), ctx, entityId)
}

// ListEntities mocks base method.
func (m *MockRepo) ListEntities(ctx context.Context, limit, offset int64) ([]domain.Conference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEntities", ctx, limit, offset)
	ret0, _ := ret[0].([]domain.Conference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntities indicates an expected call of ListEntities.
func (mr *MockRepoMockRecorder) ListEntities(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEntities", reflect.TypeOf((*MockRepo)(nil).ListEntities), ctx, limit, offset)
}

// Open mocks base method.
func (m *MockRepo) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockRepoMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockRepo)(nil).Open))
}

// UpdateEntity mocks base method.
func (m *MockRepo) UpdateEntity(ctx context.Context, entity domain.Conference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEntity", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEntity indicates an expected call of UpdateEntity.
func (mr *MockRepoMockRecorder) UpdateEntity(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEntity", reflect.TypeOf((*MockRepo)(nil).UpdateEntity), ctx, entity)
}
