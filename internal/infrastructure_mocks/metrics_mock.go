// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/metrics/metrics.go

// Package infrastructure_mocks is a generated GoMock package.
package infrastructure_mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// CreateConferenceEvent mocks base method.
func (m *MockMetrics) CreateConferenceEvent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateConferenceEvent")
}

// CreateConferenceEvent indicates an expected call of CreateConferenceEvent.
func (mr *MockMetricsMockRecorder) CreateConferenceEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConferenceEvent", reflect.TypeOf((*MockMetrics)(nil).CreateConferenceEvent))
}

// DeleteConferenceEvent mocks base method.
func (m *MockMetrics) DeleteConferenceEvent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteConferenceEvent")
}

// DeleteConferenceEvent indicates an expected call of DeleteConferenceEvent.
func (mr *MockMetricsMockRecorder) DeleteConferenceEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConferenceEvent", reflect.TypeOf((*MockMetrics)(nil).DeleteConferenceEvent))
}

// MultiCreateConferenceEvent mocks base method.
func (m *MockMetrics) MultiCreateConferenceEvent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MultiCreateConferenceEvent")
}

// MultiCreateConferenceEvent indicates an expected call of MultiCreateConferenceEvent.
func (mr *MockMetricsMockRecorder) MultiCreateConferenceEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiCreateConferenceEvent", reflect.TypeOf((*MockMetrics)(nil).MultiCreateConferenceEvent))
}

// UpdateConferenceEvent mocks base method.
func (m *MockMetrics) UpdateConferenceEvent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateConferenceEvent")
}

// UpdateConferenceEvent indicates an expected call of UpdateConferenceEvent.
func (mr *MockMetricsMockRecorder) UpdateConferenceEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConferenceEvent", reflect.TypeOf((*MockMetrics)(nil).UpdateConferenceEvent))
}
